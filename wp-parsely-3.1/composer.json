{
	"name": "parsely/wp-parsely",
	"type": "wordpress-plugin",
	"description": "The Parse.ly WordPress plugin.",
	"license": "GPL-2.0-or-later",
	"authors": [
		{
			"name": "Parsely",
			"email": "hello@parsely.com",
			"homepage": "https://www.parse.ly",
			"role": "Developer"
		}
	],
	"require": {
		"php": ">=7.1",
		"composer/installers": "^1"
	},
	"require-dev": {
		"automattic/vipwpcs": "^2.2",
		"dealerdirect/phpcodesniffer-composer-installer": "^0.4.1 || ^0.5 || ^0.6.2 || ^0.7",
		"php-parallel-lint/php-parallel-lint": "^1.0",
		"phpcompatibility/phpcompatibility-wp": "^2.1",
		"squizlabs/php_codesniffer": "^3.5",
		"wp-coding-standards/wpcs": "^2.3.0",
		"yoast/wp-test-utils": "^1",
		"phpstan/phpstan": "^1.4",
		"phpstan/extension-installer": "^1.1",
		"phpstan/phpstan-strict-rules": "^1.1",
		"szepeviktor/phpstan-wordpress": "^1.0"
	},
	"config": {
		"allow-plugins": {
			"composer/installers": true,
			"dealerdirect/phpcodesniffer-composer-installer": true,
			"phpstan/extension-installer": true
		}
	},
	"autoload": {
		"classmap": [
			"src/"
		],
		"files": [
			"wp-parsely.php"
		]
	},
	"autoload-dev": {
		"psr-4": {
			"Parsely\\Tests\\": "tests/"
		}
	},
	"scripts": {
		"coverage": [
			"@putenv WP_MULTISITE=1",
			"@php ./vendor/bin/phpunit --coverage-html ./build/coverage-html/unit -v"
		],
		"coverage-ci": [
			"@putenv WP_MULTISITE=1",
			"@php ./vendor/bin/phpunit -v"
		],
		"coveragewp": [
			"@putenv WP_MULTISITE=1",
			"@php ./vendor/bin/phpunit --coverage-html ./build/coverage-html/integration -c phpunit-integration.xml.dist -v"
		],
		"coveragewp-ci": [
			"@putenv WP_MULTISITE=1",
			"@php ./vendor/bin/phpunit -c phpunit-integration.xml.dist -v"
		],
		"cs": [
			"@php ./vendor/bin/phpcs --severity=1"
		],
		"lint": [
			"@php ./vendor/php-parallel-lint/php-parallel-lint/parallel-lint . -e php --exclude vendor --exclude .git"
		],
		"lint-ci": [
			"@php ./vendor/php-parallel-lint/php-parallel-lint/parallel-lint . -e php --exclude vendor --exclude .git --checkstyle"
		],
		"prepare-ci": [
			"bash bin/install-wp-tests.sh wordpress_test root root localhost"
		],
		"test": [
			"@php ./vendor/bin/phpunit --no-coverage --order-by=random"
		],
	   	"static-analysis": [
			"@php ./vendor/bin/phpstan analyze --memory-limit 536870912"
		],
		"test-ms": [
			"@putenv WP_MULTISITE=1",
			"@composer test"
		],
		"testwp": [
			"@php ./vendor/bin/phpunit --no-coverage --order-by=random -c phpunit-integration.xml.dist"
		],
		"testwp-experimental": [
		  "@php ./vendor/bin/phpunit --no-coverage --order-by=random -c phpunit-experimental.xml.dist"
		],
		"testwp-ms": [
			"@putenv WP_MULTISITE=1",
			"@composer testwp"
		]
	},
	"scripts-descriptions": {
		"coverage": "Run unit tests with code coverage for the Parse.ly plugin, send results to stdout, and generate plus local HTML output.",
		"coverage-ci": "Run unit tests with code coverage for the Parse.ly plugin and send results to stdout.",
		"coveragewp": "Run integration tests with code coverage for the Parse.ly plugin, send results to stdout, and generate local HTML output.",
		"coveragewp-ci": "Run integration tests with code coverage for the Parse.ly plugin and send results to stdout.",
		"cs": "Run PHPCS to checking coding standards for the Parse.ly plugin.",
		"lint": "Run PHP linting on the Parse.ly plugin.",
		"lint-ci": "Run PHP linting on the Parse.ly plugin with checkstyle output for CI.",
		"prepare-ci": "Install the files and setup a database needed to run tests for the Parse.ly plugin for CI.",
		"test": "Run the unit tests for the Parse.ly plugin.",
		"test-ms": "Run the unit tests for the Parse.ly plugin on a multisite install.",
		"testwp": "Run the integration tests for the Parse.ly plugin.",
		"testwp-ms": "Run the integration tests for the Parse.ly plugin on a multisite install."
	}
}
