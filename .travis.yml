# Travis CI (MIT License) configuration file
# @link https://travis-ci.org/

# Use new container based environment
sudo: false

# Declare project language.
# @link http://about.travis-ci.org/docs/user/languages/php/
language: php

# Declare versions of PHP to use. Use one decimal max.
matrix:
  fast_finish: true

  include:
    # aliased to 5.2.17
    - php: '5.2'
    # aliased to 5.3.29
    - php: '5.3'
    # aliased to a recent 5.4.x version
    - php: '5.4'
    # aliased to a recent 5.5.x version
    - php: '5.5'
    # aliased to a recent 5.6.x version
    - php: '5.6'
      env: SNIFF=1
    # aliased to a recent 7.0.x version
    - php: '7.0'
    # aliased to a recent 7.1.x version
    - php: '7.1'
    # bleeding edge
    - php: 'nightly'
    # aliased to a recent hhvm version
    - php: 'hhvm'

  allow_failures:
    - php: 'hhvm'
    - php: 'nightly'

before_install:
    - export PHPCS_DIR=/tmp/phpcs
    - export SNIFFS_DIR=/tmp/sniffs
    # Install CodeSniffer for WordPress Coding Standards checks.
    # @TODO Change branch back to master once WPCS + PHPCompatibility are compatible with PHPCS 3.x.
    - if [[ "$SNIFF" == "1" ]]; then git clone -b 2.9 --depth 1 https://github.com/squizlabs/PHP_CodeSniffer.git $PHPCS_DIR; fi
    # Install WordPress Coding Standards.
    - if [[ "$SNIFF" == "1" ]]; then git clone -b develop --depth 1 https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards.git $SNIFFS_DIR; fi
    # Install PHP Compatibility sniffs.
    # @TODO ADJUST PATH FOR Composer PR when merged!
    - if [[ "$SNIFF" == "1" ]]; then git clone -b master --depth 1 https://github.com/wimg/PHPCompatibility.git $SNIFFS_DIR/PHPCompatibility; fi
    # Set install path for PHPCS sniffs.
    # @link https://github.com/squizlabs/PHP_CodeSniffer/blob/4237c2fc98cc838730b76ee9cee316f99286a2a7/CodeSniffer.php#L1941
    - if [[ "$SNIFF" == "1" ]]; then $PHPCS_DIR/scripts/phpcs --config-set installed_paths $SNIFFS_DIR; fi
    # After CodeSniffer install you should refresh your path.
    - if [[ "$SNIFF" == "1" ]]; then phpenv rehash; fi


# Run test script commands.
# All commands must exit with code 0 on success. Anything else is considered failure.
script:
    # Search for PHP syntax errors.
    - find -L . -name '*.php' -print0 | xargs -0 -n 1 -P 4 php -l
    # Check code against the WordPress Coding Standards and for PHP cross-version compatibility.
    # @link https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards
    # @link https://github.com/wimg/phpcompatibility
    # @link http://pear.php.net/package/PHP_CodeSniffer/
    # Uses a custom ruleset based on WordPress.
    # Only fails the build on errors, not warnings, but still show warnings in the output.
    - if [[ "$SNIFF" == "1" ]]; then $PHPCS_DIR/scripts/phpcs --standard=./phpcs.xml --runtime-set ignore_warnings_on_exit 1; fi

